~~~~0L-MathUtility/src/main.py
    class MathUtility:
        """
        A utility class for various mathematical calculations.
        """
        def __init__(self):
            pass
        
        def is_prime(self, n):
            """
            Check if a given number is prime.

            Args:
            n (int): The number to check for primality.

            Returns:
            bool: True if the number is prime, False otherwise.
            """
            if n <= 1:
                return False
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return False
            return True
        
        def factorial(self, n):
            """
            Calculate the factorial of a given number.

            Args:
            n (int): The number for which to calculate the factorial.

            Returns:
            int: The factorial of the input number.
            """
            if n == 0 or n == 1:
                return 1
            else:
                return n * self.factorial(n - 1)
        
        def fibonacci(self, n):
            """
            Generate the Fibonacci sequence up to the nth term.

            Args:
            n (int): The number of terms to generate in the Fibonacci sequence.

            Returns:
            list: A list containing the Fibonacci sequence up to the nth term.
            """
            fib_sequence = [0, 1]
            for i in range(2, n):
                fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
            return fib_sequence
        
        def gcd(self, a, b):
            """
            Calculate the greatest common divisor (GCD) of two numbers.

            Args:
            a (int): The first number.
            b (int): The second number.

            Returns:
            int: The greatest common divisor of the two input numbers.
            """
            while b:
                a, b = b, a % b
            return a
        
        def power(self, base, exponent):
            """
            Calculate the result of raising a base to a given exponent.

            Args:
            base (int): The base number.
            exponent (int): The exponent to which the base is raised.

            Returns:
            int: The result of the base raised to the exponent.
            """
            return base ** exponent
~~~~

~~~~0R-MathUtility/src/main.py
    class MathUtility:
        """
        A utility class for various mathematical calculations.
        """
        def __init__(self):
            pass
        
        def is_prime(self, n):
            """
            Check if a given number is prime.

            Args:
            n (int): The number to check for primality.

            Returns:
            bool: True if the number is prime, False otherwise.
            """
            if n <= 1:
                return False
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return False
            return True
        
        def factorial(self, n):
            """
            Calculate the factorial of a given number.

            Args:
            n (int): The number for which to calculate the factorial.

            Returns:
            int: The factorial of the input number.
            """
            if n == 0 or n == 1:
                return 1
            else:
                return n * self.factorial(n - 1)
        
        def fibonacci(self, n):
            """
            Generate the Fibonacci sequence up to the nth term.

            Args:
            n (int): The number of terms to generate in the Fibonacci sequence.

            Returns:
            list: A list containing the Fibonacci sequence up to the nth term.
            """
            fib_sequence = [0, 1]
            for i in range(2, n):
                fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
            return fib_sequence
        
        def gcd(self, a, b):
            """
            Calculate the greatest common divisor (GCD) of two numbers.

            Args:
            a (int): The first number.
            b (int): The second number.

            Returns:
            int: The greatest common divisor of the two input numbers.
            """
            while b:
                a, b = b, a % b
            return a
        
        def power(self, base, exponent):
            """
            Calculate the result of raising a base to a given exponent.

            Args:
            base (int): The base number.
            exponent (int): The exponent to which the base is raised.

            Returns:
            int: The result of the base raised to the exponent.
            """
            return base ** exponent
            
        def prime_factorization(self, n):
            """
            Prime Factorization- Factors an int using native trial division

            Input:
                n: An int to factor
            Output:
                A list of the prime factors of n in sorted order with repetition
            Preconditions:
                n >= 1
            Example:
                >>> prime_factorization(12)
                [2, 2, 3]
                >>> prime_factorization(1)
                []
                >>> prime_factorization(101)
                [101]
            """
            for i in range(2, int(n ** 0.5) + 1):
                if n % i == 0:
                    return [i] + self.prime_factorization(n // i)
            return [n]
            
*****Alice-Add a check when n is 1-58-0-1-4-Alice
- for i in range(2, int(n ** 0.5) + 1):
+    if n == 1:
+        return []
+ for i in range(2, int(n ** 0.5) + 1):
*****
~~~~